<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>isoldier</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-22T17:01:14.085Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>isoldier</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ConcurrentHashMap简单使用</title>
    <link href="http://yoursite.com/2016/12/23/ConcurrentHashMap%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/12/23/ConcurrentHashMap简单使用/</id>
    <published>2016-12-22T16:58:10.000Z</published>
    <updated>2016-12-22T17:01:14.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ConcurrentHashMap简单使用"><a href="#ConcurrentHashMap简单使用" class="headerlink" title="ConcurrentHashMap简单使用"></a>ConcurrentHashMap简单使用</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="线程不安全的HashMap"><a href="#线程不安全的HashMap" class="headerlink" title="线程不安全的HashMap"></a>线程不安全的HashMap</h4><p>因为多线程环境下，使用HashMap进行put操作会引起死循环，导致CPU利用率接近100%，所以在并发情况下不能使用HashMap，如以下代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;(<span class="number">2</span>);</div><div class="line">Thread t = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</div><div class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    map.put(UUID.randomUUID().toString(), <span class="string">""</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;, <span class="string">"ftf"</span> + i).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="string">"ftf"</span>);</div><div class="line">t.start();</div><div class="line">t.join();</div></pre></td></tr></table></figure></p>
<h4 id="效率低下的HashTable容器"><a href="#效率低下的HashTable容器" class="headerlink" title="效率低下的HashTable容器"></a>效率低下的HashTable容器</h4><p>HashTable容器使用synchronized来保证线程安全，但在线程竞争激烈的情况下HashTable的效率非常低下。因为当一个线程访问HashTable的同步方法时，其他线程访问HashTable的同步方法时，可能会进入阻塞或轮询状态。如线程1使用put进行添加元素，线程2不但不能使用put方法添加元素，并且也不能使用get方法来获取元素，所以竞争越激烈效率越低。</p>
<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h4 id="锁分段技术"><a href="#锁分段技术" class="headerlink" title="锁分段技术"></a>锁分段技术</h4><p>HashTable容器在竞争激烈的并发环境下表现出效率低下的原因是所有访问HashTable的线程都必须竞争同一把锁，那假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。</p>
<h4 id="ConcurrentHashMap的结构"><a href="#ConcurrentHashMap的结构" class="headerlink" title="ConcurrentHashMap的结构"></a>ConcurrentHashMap的结构</h4><p>我们通过ConcurrentHashMap的类图来分析ConcurrentHashMap的结构。<br><img src="http://ww3.sinaimg.cn/large/97be9d10gw1fazv2tz365j20dw0bkq3n.jpg" alt=""><br>ConcurrentHashMap是由Segment数组结构和HashEntry数组结构组成。Segment是一种可重入锁ReentrantLock，在ConcurrentHashMap里扮演锁的角色，HashEntry则用于存储键值对数据。一个ConcurrentHashMap里包含一个Segment数组，Segment的结构和HashMap类似，是一种数组和链表结构， 一个Segment里包含一个HashEntry数组，每个HashEntry是一个链表结构的元素， 每个Segment守护者一个HashEntry数组里的元素,当对HashEntry数组的数据进行修改时，必须首先获得它对应的Segment锁。Segment的大小是2的N次方<br><img src="http://ww1.sinaimg.cn/large/97be9d10gw1fazv44onovj20dw0733z4.jpg" alt=""></p>
<h3 id="使用demo"><a href="#使用demo" class="headerlink" title="使用demo"></a>使用demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.isoldier.concurrent.concurrenthashmap;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMapDemo</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">		ConcurrentHashMap&lt;String, String&gt; StringCapitalMap = <span class="keyword">new</span> ConcurrentHashMap&lt;String, String&gt;();</div><div class="line">		StringCapitalMap.put(<span class="string">"india"</span>, <span class="string">"Delhi"</span>);</div><div class="line">		StringCapitalMap.put(<span class="string">"japan"</span>, <span class="string">"Tokyo"</span>);</div><div class="line">		StringCapitalMap.put(<span class="string">"france"</span>, <span class="string">"Paris"</span>);</div><div class="line">		StringCapitalMap.put(<span class="string">"russia"</span>, <span class="string">"Moscow"</span>);</div><div class="line"></div><div class="line">		Iterator&lt;String&gt; StringCapitalIter = StringCapitalMap.keySet().iterator();<span class="comment">// put debug point at this line</span></div><div class="line">		<span class="keyword">while</span> (StringCapitalIter.hasNext()) &#123;</div><div class="line">			String StringObj = StringCapitalIter.next();</div><div class="line">			String capital = StringCapitalMap.get(StringObj);</div><div class="line">			System.out.println(StringObj+<span class="string">"---"</span> + capital);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ConcurrentHashMap简单使用&quot;&gt;&lt;a href=&quot;#ConcurrentHashMap简单使用&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentHashMap简单使用&quot;&gt;&lt;/a&gt;ConcurrentHashMap简单使用&lt;/
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>BlockingQueue的使用</title>
    <link href="http://yoursite.com/2016/12/23/BlockingQueue%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/12/23/BlockingQueue使用/</id>
    <published>2016-12-22T16:43:03.000Z</published>
    <updated>2016-12-22T16:59:03.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="BlockingQueue的使用"><a href="#BlockingQueue的使用" class="headerlink" title="BlockingQueue的使用"></a>BlockingQueue的使用</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p>阻塞队列（BlockingQueue）是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。</p>
<p>四种处理方法汇总</p>
<table>
<thead>
<tr>
<th>方法\处理方式</th>
<th>抛出异常</th>
<th>返回特殊值</th>
<th>一直阻塞</th>
<th>超时退出</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入方法</td>
<td>add(e)</td>
<td>offer(e)</td>
<td>put(e)</td>
<td>offer(e,time,unit)</td>
</tr>
<tr>
<td>移除方法</td>
<td>remove()</td>
<td>poll()</td>
<td>take()</td>
<td>poll(time,unit)</td>
</tr>
<tr>
<td>检查方法</td>
<td>element()</td>
<td>peek()</td>
<td>不可用</td>
<td>不可用</td>
</tr>
</tbody>
</table>
<ul>
<li>抛出异常：是指当阻塞队列满时候，再往队列里插入元素，会抛出IllegalStateException(“Queue full”)异常。当队列为空时，从队列里获取元素时会抛出NoSuchElementException异常 。</li>
<li>返回特殊值：插入方法会返回是否成功，成功则返回true。移除方法，则是从队列里拿出一个元素，如果没有则返回null</li>
<li>一直阻塞：当阻塞队列满时，如果生产者线程往队列里put元素，队列会一直阻塞生产者线程，直到拿到数据，或者响应中断退出。当队列空时，消费者线程试图从队列里take元素，队列也会阻塞消费者线程，直到队列可用。</li>
<li>超时退出：当阻塞队列满时，队列会阻塞生产者线程一段时间，如果超过一定的时间，生产者线程就会退出。</li>
</ul>
<h3 id="原理简单介绍"><a href="#原理简单介绍" class="headerlink" title="原理简单介绍"></a>原理简单介绍</h3><p>如果队列是空的，消费者会一直等待，当生产者添加元素时候，消费者是如何知道当前队列有元素的呢？如果让你来设计阻塞队列你会如何设计，让生产者和消费者能够高效率的进行通讯呢？让我们先来看看JDK是如何实现的。</p>
<p>使用通知模式实现。所谓通知模式，就是当生产者往满的队列里添加元素时会阻塞住生产者，当消费者消费了一个队列中的元素后，会通知生产者当前队列可用。通过查看JDK源码发现ArrayBlockingQueue使用了Condition来实现，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity, <span class="keyword">boolean</span> fair)</span> </span>&#123;</div><div class="line">        <span class="comment">//省略其他代码</span></div><div class="line">        notEmpty = lock.newCondition();</div><div class="line">        notFull =  lock.newCondition();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        checkNotNull(e);</div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lockInterruptibly();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (count == items.length)</div><div class="line">                notFull.await();</div><div class="line">            insert(e);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lockInterruptibly();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>)</div><div class="line">                notEmpty.await();</div><div class="line">            <span class="keyword">return</span> extract();</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(E x)</span> </span>&#123;</div><div class="line">        items[putIndex] = x;</div><div class="line">        putIndex = inc(putIndex);</div><div class="line">        ++count;</div><div class="line">        notEmpty.signal();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>整个原理框架如上所示，深入的原理在本文中不做进一步挖掘</p>
<h3 id="ArrayBlockingQueue-vs-LinkedBlockingQueue"><a href="#ArrayBlockingQueue-vs-LinkedBlockingQueue" class="headerlink" title="ArrayBlockingQueue vs LinkedBlockingQueue"></a>ArrayBlockingQueue vs LinkedBlockingQueue</h3><ul>
<li>ArrayBlockingQueue ：一个由数组结构组成的有界阻塞队列。</li>
</ul>
<p>ArrayBlockingQueue的大小在创建之后就不会改变。如果设置大小为Integer.MAX_VALUE在内存中会是一个很大的开销</p>
<ul>
<li>LinkedBlockingQueue ：一个由链表结构组成的有界阻塞队列。</li>
</ul>
<p>动态的创建节点，知道达到上限 默认上限是Integer.MAX_VALUE</p>
<h3 id="使用demo"><a href="#使用demo" class="headerlink" title="使用demo"></a>使用demo</h3><p>生产者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.isoldier.concurrent.blockingqueue;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">	<span class="keyword">protected</span> BlockingQueue queue = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BlockingQueue queue)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.queue = queue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            queue.put(<span class="string">"1"</span>);</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">            queue.put(<span class="string">"2"</span>);</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">            queue.put(<span class="string">"3"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>消费者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.isoldier.concurrent.blockingqueue;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">	<span class="keyword">protected</span> BlockingQueue queue = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue queue)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.queue = queue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(queue.take());</div><div class="line">            System.out.println(queue.take());</div><div class="line">            System.out.println(queue.take());</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行demo<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.isoldier.concurrent.blockingqueue;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.concurrent.ArrayBlockingQueue;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockingQueueTest</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">		BlockingQueue queue = <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">1024</span>);</div><div class="line"></div><div class="line">		Producer producer = <span class="keyword">new</span> Producer(queue);</div><div class="line">		Consumer consumer = <span class="keyword">new</span> Consumer(queue);</div><div class="line"></div><div class="line">		<span class="keyword">new</span> Thread(producer).start();</div><div class="line">		<span class="keyword">new</span> Thread(consumer).start();</div><div class="line"></div><div class="line">		Thread.sleep(<span class="number">4000</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td></tr></table></figure></p>
<p>1,2,3出现的时间间隔是1秒钟</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;BlockingQueue的使用&quot;&gt;&lt;a href=&quot;#BlockingQueue的使用&quot; class=&quot;headerlink&quot; title=&quot;BlockingQueue的使用&quot;&gt;&lt;/a&gt;BlockingQueue的使用&lt;/h2&gt;&lt;h3 id=&quot;基础概念&quot;&gt;&lt;a 
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java异常的简单使用</title>
    <link href="http://yoursite.com/2016/12/22/java%E5%BC%82%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%AF%AF%E5%8C%BA/"/>
    <id>http://yoursite.com/2016/12/22/java异常使用误区/</id>
    <published>2016-12-22T14:43:03.000Z</published>
    <updated>2016-12-22T17:02:22.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-背景介绍"><a href="#0-背景介绍" class="headerlink" title="0. 背景介绍"></a>0. 背景介绍</h2><p>异常处理是代码中必不可少的处理部分，如何正确的处理异常时非常关键的，为了以后代码中异常处理的规范性，搜罗了一些异常使用的建议，供以后使用</p>
<h2 id="1-异常分类"><a href="#1-异常分类" class="headerlink" title="1.异常分类"></a>1.异常分类</h2><p>大体上可以将异常分为两类</p>
<ol>
<li>调用代码不能继续执行，需要立即终止。例如服务器连接不上、参数不正确等。这些时候都适用非检测异常，不需要调用代码的显式捕捉和处理，而且代码简洁明了。</li>
<li>调用代码需要进一步处理和恢复。如SQL异常等等</li>
</ol>
<h2 id="2-异常处理的常用方式"><a href="#2-异常处理的常用方式" class="headerlink" title="2. 异常处理的常用方式"></a>2. 异常处理的常用方式</h2><h3 id="2-1-自定义错误返回码"><a href="#2-1-自定义错误返回码" class="headerlink" title="2.1 自定义错误返回码"></a>2.1 自定义错误返回码</h3><p>这样处理之后异常信息简洁明了，而且容易定位错误发生的原因。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义 RuntimeException</div><div class="line"> * 添加错误代码属性</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeException</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">RuntimeException</span> </span>&#123;</div><div class="line">     <span class="comment">//默认错误代码</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer GENERIC = <span class="number">1000000</span>;</div><div class="line">    <span class="comment">//错误代码</span></div><div class="line">    <span class="keyword">private</span> Integer errorCode;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">RuntimeException</span><span class="params">(Integer errorCode, Throwable cause)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>(errorCode, <span class="keyword">null</span>, cause);</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">RuntimeException</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</div><div class="line">            <span class="comment">//利用通用错误代码</span></div><div class="line">            <span class="keyword">this</span>(GENERIC, message, cause);</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">RuntimeException</span><span class="params">(Integer errorCode, String message, Throwable cause)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(message, cause);</div><div class="line">            <span class="keyword">this</span>.errorCode = errorCode;</div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> Integer <span class="title">getErrorCode</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> errorCode;</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-2-及时捕获异常"><a href="#2-2-及时捕获异常" class="headerlink" title="2.2. 及时捕获异常"></a>2.2. 及时捕获异常</h3><p>异常要及时捕获，代码分层次，异常及时捕获，以免污染层次，比如我们连接数据库时，出现异常，如果此时抛出异常的话，那么时候这个异常就会在代码的各个角落里出现，看着就不舒服<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">retrieveCustomerById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">     <span class="keyword">try</span>&#123;</div><div class="line">            <span class="comment">//根据 ID 查询数据库</span></div><div class="line">     &#125;<span class="keyword">catch</span>(SQLException e)&#123;</div><div class="line">            <span class="comment">//利用非检测异常封装检测异常，降低层次耦合</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(SQLErrorCode, e);</div><div class="line">     &#125;<span class="keyword">finally</span>&#123;</div><div class="line">            <span class="comment">//关闭连接，清理资源</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="2-3-不要忽略异常"><a href="#2-3-不要忽略异常" class="headerlink" title="2.3. 不要忽略异常"></a>2.3. 不要忽略异常</h3><p>如下异常处理只是将异常输出到控制台，没有任何意义。而且这里出现了异常并没有中断程序，进而调用代码继续执行，导致更多的异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">retrieveObjectById</span><span class="params">(Long id)</span></span>&#123;</div><div class="line">   <span class="keyword">try</span>&#123;</div><div class="line">       <span class="comment">//..some code that throws SQLException</span></div><div class="line">    &#125;<span class="keyword">catch</span>(SQLException ex)&#123;</div><div class="line">     <span class="comment">/**</span></div><div class="line">       *了解的人都知道，这里的异常打印毫无意义，仅仅是将错误堆栈输出到控制台。</div><div class="line">       * 而在 Production 环境中，需要将错误堆栈输出到日志。</div><div class="line">       * 而且这里 catch 处理之后程序继续执行，会导致进一步的问题*/</div><div class="line"></div><div class="line">          ex.printStacktrace();</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以将代码重构成</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">retrieveObjectById</span><span class="params">(Long id)</span></span>&#123;</div><div class="line"> <span class="keyword">try</span>&#123;</div><div class="line">    <span class="comment">//..some code that throws SQLException</span></div><div class="line"> &#125;</div><div class="line"> <span class="keyword">catch</span>(SQLException ex)&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(“Exception in retieveObjectById”, ex);</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">finally</span>&#123;</div><div class="line">    <span class="comment">//clean up resultset, statement, connection etc</span></div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0-背景介绍&quot;&gt;&lt;a href=&quot;#0-背景介绍&quot; class=&quot;headerlink&quot; title=&quot;0. 背景介绍&quot;&gt;&lt;/a&gt;0. 背景介绍&lt;/h2&gt;&lt;p&gt;异常处理是代码中必不可少的处理部分，如何正确的处理异常时非常关键的，为了以后代码中异常处理的规范性，搜罗
    
    </summary>
    
      <category term="java基础" scheme="http://yoursite.com/categories/java%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java基础" scheme="http://yoursite.com/tags/java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Guava使用基础入门-cache</title>
    <link href="http://yoursite.com/2016/12/21/guava%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8-cache/"/>
    <id>http://yoursite.com/2016/12/21/guava使用基础入门-cache/</id>
    <published>2016-12-21T13:58:10.000Z</published>
    <updated>2016-12-22T17:01:53.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Guava使用基础入门-cache"><a href="#Guava使用基础入门-cache" class="headerlink" title="Guava使用基础入门-cache"></a>Guava使用基础入门-cache</h2><h3 id="0-使用说明"><a href="#0-使用说明" class="headerlink" title="0. 使用说明"></a>0. 使用说明</h3><p>guava是Google的一个底层的库，里面包含了许多非常基础的应用，在很多Google的项目中都用到这个库，在平时项目的开发中，如果能善用这些方法，会使得我们的代码更加规范和健壮。</p>
<h3 id="1-Guava-Cache"><a href="#1-Guava-Cache" class="headerlink" title="1. Guava Cache"></a>1. Guava Cache</h3><p>通常来说，Guava Cache适用于：</p>
<ul>
<li>你愿意消耗一些内存空间来提升速度。</li>
<li>你预料到某些键会被查询一次以上。</li>
<li>缓存中存放的数据总量不会超出内存容量</li>
</ul>
<p>在使用缓存前，首先问自己一个问题：有没有合理的默认方法来加载或计算与键关联的值？如果有的话，你应当使用CacheLoader。如果没有，或者你想要覆盖默认的加载运算，同时保留”获取缓存-如果没有-则计算”[get-if-absent-compute]的原子语义，你应该在调用get时传入一个Callable实例。缓存元素也可以通过Cache.put方法直接插入，但自动加载是首选的，因为它可以更容易地推断所有缓存内容的一致性。</p>
<h3 id="2-使用demo"><a href="#2-使用demo" class="headerlink" title="2. 使用demo"></a>2. 使用demo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.isoldier.guava.cache;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.common.base.MoreObjects;</div><div class="line"><span class="keyword">import</span> com.google.common.cache.CacheBuilder;</div><div class="line"><span class="keyword">import</span> com.google.common.cache.CacheLoader;</div><div class="line"><span class="keyword">import</span> com.google.common.cache.LoadingCache;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheDemo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">		<span class="comment">// create a cache for employees based on their employee id</span></div><div class="line">		LoadingCache&lt;String, Employee&gt; employeeCache = CacheBuilder</div><div class="line">				.newBuilder().maximumSize(<span class="number">100</span>) <span class="comment">// maximum 100 records can be cached												</span></div><div class="line">				.expireAfterAccess(<span class="number">30</span>, TimeUnit.MINUTES) <span class="comment">// cache will expire after 30 minutes of access														</span></div><div class="line">				.build(<span class="keyword">new</span> CacheLoader&lt;String, Employee&gt;() &#123; <span class="comment">// build the cacheloader																</span></div><div class="line">					<span class="meta">@Override</span></div><div class="line">					<span class="function"><span class="keyword">public</span> Employee <span class="title">load</span><span class="params">(String empId)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">						<span class="comment">// make the expensive call</span></div><div class="line">						<span class="keyword">return</span> getFromDatabase(empId);</div><div class="line">					&#125;</div><div class="line">				&#125;);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="comment">// on first invocation, cache will be populated with corresponding</span></div><div class="line">			<span class="comment">// employee record</span></div><div class="line">			System.out.println(<span class="string">"Invocation #1"</span>);</div><div class="line">			System.out.println(employeeCache.get(<span class="string">"100"</span>));</div><div class="line">			System.out.println(employeeCache.get(<span class="string">"103"</span>));</div><div class="line">			System.out.println(employeeCache.get(<span class="string">"110"</span>));</div><div class="line"></div><div class="line">			<span class="comment">// second invocation, data will be returned from cache</span></div><div class="line">			System.out.println(<span class="string">"Invocation #2"</span>);</div><div class="line">			System.out.println(employeeCache.get(<span class="string">"100"</span>));</div><div class="line">			System.out.println(employeeCache.get(<span class="string">"103"</span>));</div><div class="line">			System.out.println(employeeCache.get(<span class="string">"110"</span>));</div><div class="line"></div><div class="line">		&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Employee <span class="title">getFromDatabase</span><span class="params">(String empId)</span> </span>&#123;</div><div class="line"></div><div class="line">		Employee e1 = <span class="keyword">new</span> Employee(<span class="string">"Mahesh"</span>, <span class="string">"Finance"</span>, <span class="string">"100"</span>);</div><div class="line">		Employee e2 = <span class="keyword">new</span> Employee(<span class="string">"Rohan"</span>, <span class="string">"IT"</span>, <span class="string">"103"</span>);</div><div class="line">		Employee e3 = <span class="keyword">new</span> Employee(<span class="string">"Sohan"</span>, <span class="string">"Admin"</span>, <span class="string">"110"</span>);</div><div class="line"></div><div class="line">		Map&lt;String, Employee&gt; database = <span class="keyword">new</span> HashMap&lt;String, Employee&gt;();</div><div class="line"></div><div class="line">		database.put(<span class="string">"100"</span>, e1);</div><div class="line">		database.put(<span class="string">"103"</span>, e2);</div><div class="line">		database.put(<span class="string">"110"</span>, e3);</div><div class="line"></div><div class="line">		System.out.println(<span class="string">"Database hit for"</span> + empId);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> database.get(empId);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">	String name;</div><div class="line">	String dept;</div><div class="line">	String emplD;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, String dept, String empID)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">		<span class="keyword">this</span>.dept = dept;</div><div class="line">		<span class="keyword">this</span>.emplD = empID;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.name = name;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getDept</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> dept;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(String dept)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.dept = dept;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getEmplD</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> emplD;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmplD</span><span class="params">(String emplD)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.emplD = emplD;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> MoreObjects.toStringHelper(Employee.class).add(<span class="string">"Name"</span>, name)</div><div class="line">				.add(<span class="string">"Department"</span>, dept).add(<span class="string">"Emp Id"</span>, emplD).toString();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Guava使用基础入门-cache&quot;&gt;&lt;a href=&quot;#Guava使用基础入门-cache&quot; class=&quot;headerlink&quot; title=&quot;Guava使用基础入门-cache&quot;&gt;&lt;/a&gt;Guava使用基础入门-cache&lt;/h2&gt;&lt;h3 id=&quot;0-使用说
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>ExecutorService的使用</title>
    <link href="http://yoursite.com/2016/12/16/ExecutorService%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/12/16/ExecutorService的使用/</id>
    <published>2016-12-16T03:43:03.000Z</published>
    <updated>2016-12-16T13:48:13.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ExecutorService的使用"><a href="#ExecutorService的使用" class="headerlink" title="ExecutorService的使用"></a>ExecutorService的使用</h1><h3 id="1-创建ExecutorService的方式"><a href="#1-创建ExecutorService的方式" class="headerlink" title="1. 创建ExecutorService的方式"></a>1. 创建ExecutorService的方式</h3><p>创建ExecutorService的方式有好几种采用哪种方式创建应该依赖于具体的情况，我们也可以通过工厂模式创建ExecutorService，下面是三种常见的创建ExecutorService的方式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ExecutorService executorService1 = Executors.newSingleThreadExecutor();</div><div class="line"></div><div class="line">ExecutorService executorService2 = Executors.newFixedThreadPool(<span class="number">10</span>);</div><div class="line"></div><div class="line">ExecutorService executorService3 = Executors.newScheduledThreadPool(<span class="number">10</span>);</div></pre></td></tr></table></figure>
<h3 id="2-使用ExecutorService的方式"><a href="#2-使用ExecutorService的方式" class="headerlink" title="2. 使用ExecutorService的方式"></a>2. 使用ExecutorService的方式</h3><p>以下是集中常见的使用方式<br>execute(Runnable)<br>submit(Runnable)<br>submit(Callable)<br>invokeAny(…)<br>invokeAll(…)</p>
<h4 id="execute-Runnable-使用demo"><a href="#execute-Runnable-使用demo" class="headerlink" title="execute(Runnable)使用demo"></a>execute(Runnable)使用demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ExecutorService executorService = Executors.newSingleThreadExecutor();</div><div class="line"></div><div class="line">executorService.execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Asynchronous task"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">executorService.shutdown();</div></pre></td></tr></table></figure>
<h4 id="submit-Runnable-使用demo"><a href="#submit-Runnable-使用demo" class="headerlink" title="submit(Runnable)使用demo"></a>submit(Runnable)使用demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Future future = executorService.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Asynchronous task"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">future.get();  <span class="comment">//returns null if the task has finished correctly.</span></div></pre></td></tr></table></figure>
<h4 id="submit-Callable-使用demo"><a href="#submit-Callable-使用demo" class="headerlink" title="submit(Callable)使用demo"></a>submit(Callable)使用demo</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Future future = executorService.submit(<span class="keyword">new</span> Callable()&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Asynchronous Callable"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"Callable Result"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"future.get() = "</span> + future.get());</div></pre></td></tr></table></figure>
<p>上述代码的执行结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Asynchronous Callable</div><div class="line">future.get() = Callable Result</div></pre></td></tr></table></figure></p>
<h4 id="invokeAny-…-使用demo"><a href="#invokeAny-…-使用demo" class="headerlink" title="invokeAny(…)使用demo"></a>invokeAny(…)使用demo</h4><p>该方法会唤醒其中任意一个线程去启动，如下的代码的输出的结果可能会出现Task1 也有可能是Task2 或者Task3  随机出现任意一个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">ExecutorService executorService = Executors.newSingleThreadExecutor();</div><div class="line"></div><div class="line">Set&lt;Callable&lt;String&gt;&gt; callables = <span class="keyword">new</span> HashSet&lt;Callable&lt;String&gt;&gt;();</div><div class="line"></div><div class="line">callables.add(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Task 1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">callables.add(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Task 2"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">callables.add(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Task 3"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">String result = executorService.invokeAny(callables);</div><div class="line"></div><div class="line">System.out.println(<span class="string">"result = "</span> + result);</div><div class="line"></div><div class="line">executorService.shutdown();</div></pre></td></tr></table></figure></p>
<h4 id="invokeAll-…-使用demo"><a href="#invokeAll-…-使用demo" class="headerlink" title="invokeAll(…)使用demo"></a>invokeAll(…)使用demo</h4><p>唤醒所有线程去执行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">ExecutorService executorService = Executors.newSingleThreadExecutor();</div><div class="line"></div><div class="line">Set&lt;Callable&lt;String&gt;&gt; callables = <span class="keyword">new</span> HashSet&lt;Callable&lt;String&gt;&gt;();</div><div class="line"></div><div class="line">callables.add(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Task 1"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">callables.add(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Task 2"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">callables.add(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Task 3"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">List&lt;Future&lt;String&gt;&gt; futures = executorService.invokeAll(callables);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(Future&lt;String&gt; future : futures)&#123;</div><div class="line">    System.out.println(<span class="string">"future.get = "</span> + future.get());</div><div class="line">&#125;</div><div class="line"></div><div class="line">executorService.shutdown();</div></pre></td></tr></table></figure></p>
<p>上述代码的执行结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">future.get = Task 1</div><div class="line">future.get = Task 3</div><div class="line">future.get = Task 2</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ExecutorService的使用&quot;&gt;&lt;a href=&quot;#ExecutorService的使用&quot; class=&quot;headerlink&quot; title=&quot;ExecutorService的使用&quot;&gt;&lt;/a&gt;ExecutorService的使用&lt;/h1&gt;&lt;h3 id=&quot;1
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>iptables基础</title>
    <link href="http://yoursite.com/2016/11/25/iptables%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2016/11/25/iptables基础/</id>
    <published>2016-11-25T15:06:19.000Z</published>
    <updated>2016-12-16T13:49:52.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>iptables是Linux内核默认的防火墙。防火墙，其实说白了讲，就是用于实现Linux下访问控制的功能的，它分为硬件的或者软件的防火墙两种。无论是在哪个网络中，防火墙工作的地方一定是在网络的边缘。而我们的任务就是需要去定义到底防火墙如何工作，这就是防火墙的策略，规则，以达到让它对出入网络的IP、数据进行检测。</p>
<p>对于TCP/IP的七层模型来讲，我们知道第三层是网络层，三层的防火墙会在这层对源地址和目标地址进行检测。</p>
<p>iptables在内核空间中的五个位置发生作用：</p>
<ol>
<li>内核空间中：从一个网络接口进来，到另一个网络接口去的</li>
<li>数据包从内核流入用户空间的</li>
<li>数据包从用户空间流出的</li>
<li>进入/离开本机的外网接口</li>
<li>进入/离开本机的内网接口</li>
</ol>
<p>这五个位置也被称为五个钩子函数（hook functions）,也叫五个规则链。</p>
<ol>
<li>PREROUTING (路由前)</li>
<li>INPUT (数据包流入口)</li>
<li>FORWARD (转发管卡)</li>
<li>OUTPUT(数据包出口)</li>
<li>POSTROUTING（路由后）</li>
</ol>
<h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="http://ww2.sinaimg.cn/large/97be9d10gw1f6xsxzzupnj20b507pgm4.jpg" alt=""></p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p><strong>格式：iptables [-t table] COMMAND chain CRETIRIA -j ACTION</strong></p>
<p>iptables [ -t 表名] 命令选项 [链名] [条件匹配] [-j 处理方式]<br>1、表名和链名即为上述四张表、5条链<br>2、常用的命令选项如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-A    在指定链的末尾添加（--append）一条新的规则</div><div class="line">-I    在指定链中插入（--insert）一条新的规则，默认在链的开头插入</div><div class="line">-</div><div class="line">-D    删除（--delete）指定链中的某一条规则，按规则序号或内容确定要删除的规则</div><div class="line">-</div><div class="line">-L    列出（--list）指定链中的所有的规则进行查看，默认列出表中所有链的内容</div><div class="line">-F    清空（--flush）指定链中的所有规则，默认清空表中所有链的内容</div><div class="line">-</div><div class="line">-n    用数字形式（--numeric）显示输出结果，显示主机的 IP地址而不是主机名</div><div class="line">-</div><div class="line">-h    查看命令帮助信息（--help）</div></pre></td></tr></table></figure></p>
<p>3、条件匹配分为基本匹配和扩展匹配，常用的基本匹配参数如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-p    指定规则协议，如tcp, udp,icmp等，可以使用all来指定所有协议</div><div class="line">-s    指定数据包的源地址参数，可以使IP地址、网络地址、主机名</div><div class="line">-d    指定目的地址</div><div class="line">-i    输入接口</div><div class="line">-o    输出接口</div></pre></td></tr></table></figure></p>
<p>4、常用的处理方式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ACCEPT：允许数据包通过。</div><div class="line">DROP：直接丢弃数据包，不给出任何回应信息。</div><div class="line">REJECT：拒绝数据包通过，必须时会给数据发送端一个响应信息。</div></pre></td></tr></table></figure></p>
<p>\</p>
<h4 id="禁止客户机访问不健康网站"><a href="#禁止客户机访问不健康网站" class="headerlink" title="禁止客户机访问不健康网站"></a>禁止客户机访问不健康网站</h4><p>【例1】添加iptables规则禁止用户访问域名为www.sexy.com的网站。</p>
<p>iptables -I FORWARD -d www.sexy.com -j DROP</p>
<p>【例2】添加iptables规则禁止用户访问IP地址为20.20.20.20的网站。</p>
<p>iptables -I FORWARD -d 20.20.20.20 -j DROP</p>
<h4 id="禁止某些客户机上网"><a href="#禁止某些客户机上网" class="headerlink" title="禁止某些客户机上网"></a>禁止某些客户机上网</h4><p>【例1】添加iptables规则禁止IP地址为192.168.1.X的客户机上网。</p>
<p>iptables -I FORWARD -s 192.168.1.X -j DROP</p>
<p>【例2】添加iptables规则禁止192.168.1.0子网里所有的客户机上网。</p>
<p>iptables -I FORWARD -s 192.168.1.0/24 -j DROP</p>
<h4 id="禁止访问11-12-13-14地址"><a href="#禁止访问11-12-13-14地址" class="headerlink" title="禁止访问11.12.13.14地址"></a>禁止访问11.12.13.14地址</h4><p>iptables -A OUTPUT -d 11.12.13.14 -j DROP</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;iptables&quot;&gt;&lt;a href=&quot;#iptables&quot; class=&quot;headerlink&quot; title=&quot;iptables&quot;&gt;&lt;/a&gt;iptables&lt;/h2&gt;&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>dubbo之addShutdownHook</title>
    <link href="http://yoursite.com/2016/11/19/dubbo%E4%B9%8BaddShutdownHook/"/>
    <id>http://yoursite.com/2016/11/19/dubbo之addShutdownHook/</id>
    <published>2016-11-19T13:46:17.000Z</published>
    <updated>2016-12-14T15:53:02.300Z</updated>
    
    <content type="html"><![CDATA[<h2 id="addShutdownHook-简单介绍"><a href="#addShutdownHook-简单介绍" class="headerlink" title="addShutdownHook 简单介绍"></a>addShutdownHook 简单介绍</h2><p>java.lang.Runtime.addShutdownHook(Thread hook) 方法注册一个新的虚拟机关闭挂钩。</p>
<p>该方法用来在jvm中增加一个关闭的钩子。当程序正常退出或者系统调用System.exit方法或虚拟机被关闭时就会执行添加的shutdownHook线程。<br>其中shutdownHook是一个已初始化但并不有启动的线程，当jvm关闭的时候，会执行系统中已经设置的所有通过方法addShutdownHook添加的钩子，当系统执行完这些钩子后，jvm才会关闭。所以可通过这些钩子在jvm关闭的时候进行内存清理、资源回收等工作</p>
<h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RuntimeDemo</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">// a class that extends thread that is to be called when program is exiting</span></div><div class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line"></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">         System.out.println(<span class="string">"Bye."</span>);</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">         <span class="comment">// register Message as shutdown hook</span></div><div class="line">         Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Message());</div><div class="line"></div><div class="line">         <span class="comment">// print the state of the program</span></div><div class="line">         System.out.println(<span class="string">"Program is starting..."</span>);</div><div class="line"></div><div class="line">         <span class="comment">// cause thread to sleep for 3 seconds</span></div><div class="line">         System.out.println(<span class="string">"Waiting for 3 seconds..."</span>);</div><div class="line">         Thread.sleep(<span class="number">3000</span>);</div><div class="line"></div><div class="line">         <span class="comment">// print that the program is closing </span></div><div class="line">         System.out.println(<span class="string">"Program is closing..."</span>);</div><div class="line"></div><div class="line"></div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">      &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Program is starting...</div><div class="line">Waiting for 3 seconds...</div><div class="line">Program is closing...</div><div class="line">Bye.</div></pre></td></tr></table></figure>
<h2 id="dubbo中使用的场景"><a href="#dubbo中使用的场景" class="headerlink" title="dubbo中使用的场景"></a>dubbo中使用的场景</h2><p>dubbo可以在非kill - 9或者发生故障时实现优雅退出<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">if</span> (args == <span class="keyword">null</span> || args.length == <span class="number">0</span>) &#123;</div><div class="line">              String config = ConfigUtils.getProperty(CONTAINER_KEY, loader.getDefaultExtensionName());</div><div class="line">              args = Constants.COMMA_SPLIT_PATTERN.split(config);</div><div class="line">          &#125;</div><div class="line">          </div><div class="line">          <span class="keyword">final</span> List&lt;Container&gt; containers = <span class="keyword">new</span> ArrayList&lt;Container&gt;();</div><div class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i ++) &#123;</div><div class="line">              containers.add(loader.getExtension(args[i]));</div><div class="line">          &#125;</div><div class="line">          logger.info(<span class="string">"Use container type("</span> + Arrays.toString(args) + <span class="string">") to run dubbo serivce."</span>);</div><div class="line">          </div><div class="line">          <span class="keyword">if</span> (<span class="string">"true"</span>.equals(System.getProperty(SHUTDOWN_HOOK_KEY))) &#123;</div><div class="line">            Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread() &#123;</div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">for</span> (Container container : containers) &#123;</div><div class="line">                        <span class="keyword">try</span> &#123;</div><div class="line">                            container.stop();</div><div class="line">                            logger.info(<span class="string">"Dubbo "</span> + container.getClass().getSimpleName() + <span class="string">" stopped!"</span>);</div><div class="line">                        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">                            logger.error(t.getMessage(), t);</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">synchronized</span> (Main.class) &#123;</div><div class="line">                            running = <span class="keyword">false</span>;</div><div class="line">                            Main.class.notify();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">          &#125;</div><div class="line">          </div><div class="line">          <span class="keyword">for</span> (Container container : containers) &#123;</div><div class="line">              container.start();</div><div class="line">              logger.info(<span class="string">"Dubbo "</span> + container.getClass().getSimpleName() + <span class="string">" started!"</span>);</div><div class="line">          &#125;</div><div class="line">          System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"[yyyy-MM-dd HH:mm:ss]"</span>).format(<span class="keyword">new</span> Date()) + <span class="string">" Dubbo service server started!"</span>);</div><div class="line">      &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</div><div class="line">          e.printStackTrace();</div><div class="line">          logger.error(e.getMessage(), e);</div><div class="line">          System.exit(<span class="number">1</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">synchronized</span> (Main.class) &#123;</div><div class="line">          <span class="keyword">while</span> (running) &#123;</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  Main.class.wait();</div><div class="line">              &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;addShutdownHook-简单介绍&quot;&gt;&lt;a href=&quot;#addShutdownHook-简单介绍&quot; class=&quot;headerlink&quot; title=&quot;addShutdownHook 简单介绍&quot;&gt;&lt;/a&gt;addShutdownHook 简单介绍&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="dubbo" scheme="http://yoursite.com/categories/dubbo/"/>
    
    
  </entry>
  
  <entry>
    <title>Vmware搭建集群</title>
    <link href="http://yoursite.com/2016/07/08/Vmware%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4(%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83)/"/>
    <id>http://yoursite.com/2016/07/08/Vmware搭建集群(基础环境)/</id>
    <published>2016-07-07T16:43:03.000Z</published>
    <updated>2016-12-16T13:54:32.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vmware搭建集群（基础环境）"><a href="#Vmware搭建集群（基础环境）" class="headerlink" title="Vmware搭建集群（基础环境）"></a>Vmware搭建集群（基础环境）</h2><h3 id="1-单台机器配置"><a href="#1-单台机器配置" class="headerlink" title="1. 单台机器配置"></a>1. 单台机器配置</h3><h4 id="安装Vmware-tools"><a href="#安装Vmware-tools" class="headerlink" title="安装Vmware tools"></a>安装Vmware tools</h4><p>正常步骤安装虚拟机，以Ubuntu15.10为例，安装好之后会发现平面分辨率不够，并不能充满整个屏幕，安装VMware tools 安装好之后重启可以发现Ubuntu系统充满整个屏幕。</p>
<p>解压tools安装包文件夹<br>安装命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar -xvf VMwareTools-10.0.0-2977863.tar.gz</div><div class="line">cd vmware-tools-distrib/</div><div class="line">sudo ./vmware-install.pl</div></pre></td></tr></table></figure>
<p>按照屏幕提示安装执行</p>
<h4 id="安装openssh-server"><a href="#安装openssh-server" class="headerlink" title="安装openssh-server"></a>安装openssh-server</h4><p> 为了让外部机器可以通过ssh连接到该机器 需要安装ssh<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssh-server</div></pre></td></tr></table></figure></p>
<h4 id="安装openssh-server-1"><a href="#安装openssh-server-1" class="headerlink" title="安装openssh-server"></a>安装openssh-server</h4><p>下载安装包 本文以安装包jdk-7u79-linux-x64.tar.gz为例，我们将jdk安装到/usr/lib/jvm 位置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /usr/lib/jvm</div><div class="line">cd /usr/lib/jvm/</div><div class="line">tar -xvf jdk-7u79-linux-x64.tar.gz</div></pre></td></tr></table></figure>
<p>修改环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim ~/.bashrc</div></pre></td></tr></table></figure></p>
<p>在文件末尾处添加以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#set oracle jdk environment</div><div class="line">export JAVA_HOME=/usr/lib/jvm/jdk1.7.0_79  ## 这里要注意目录要换成自己解压的jdk 目录</div><div class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</div><div class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</div></pre></td></tr></table></figure></p>
<h3 id="2-集群配置"><a href="#2-集群配置" class="headerlink" title="2. 集群配置"></a>2. 集群配置</h3><h4 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h4><p>默认安装的Ubuntu系统网络配置是动态的自动获取IP地址，如果集群中的IP一直在变肯定是不行的，所以需要静态设置IP</p>
<ol>
<li>首先设置虚拟机的网络连接方式为NAT</li>
</ol>
<p><img src="http://ww4.sinaimg.cn/large/97be9d10gw1f5guykvfurj209y0bzgmg.jpg" alt=""></p>
<ol>
<li>以无线网络连接为例，在本机设置共享，选择VMnet8</li>
</ol>
<p><img src="http://ww4.sinaimg.cn/large/97be9d10gw1f5gv1z5eskj20bs0gomyb.jpg" alt=""></p>
<ol>
<li>查看VMnet8属性</li>
</ol>
<p><img src="http://ww1.sinaimg.cn/large/97be9d10gw1f5gv3v6gwbj20ol0gcwjn.jpg" alt=""><br>如果我们不设置静态ip的话，我们虚拟机的机器会随机分配192.168.24.3~192.168.24.254 之间的地址，其中涉及到网关，广播地址等网络知识，此处不作详细说明</p>
<ol>
<li>vmware 设置</li>
</ol>
<p>编辑-&gt;虚拟网络编辑器<br><img src="http://ww4.sinaimg.cn/large/97be9d10gw1f5gvq8c1z5j20uj0ex0wx.jpg" alt=""></p>
<ol>
<li>修改配置文件设置静态ip</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/network/interfaces</div></pre></td></tr></table></figure>
<p>修改配置文件为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># interfaces(5) file used by ifup(8) and ifdown(8)</div><div class="line">auto lo</div><div class="line">iface lo inet loopback</div><div class="line"></div><div class="line">auto eno16777736</div><div class="line">iface eno16777736 inet static</div><div class="line">address 192.168.24.111</div><div class="line">netmask 255.255.255.0</div><div class="line">gateway 192.168.24.2</div><div class="line">dns-nameservers 192.168.24.2</div></pre></td></tr></table></figure>
<p>代码中的eno16777736是用VMware安装后出现的结果，等价于eth0,具体原因不在本次讨论范围</p>
<p>使配置文件生效</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo  /etc/init.d/networking restart</div></pre></td></tr></table></figure>
<p>查看网络</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">jinmeng@ubuntu-slave1:/usr/lib/jvm$ ifconfig</div><div class="line">eno16777736 Link encap:Ethernet  HWaddr 00:0c:29:11:9d:cf</div><div class="line">          inet addr:192.168.24.111  Bcast:192.168.24.255  Mask:255.255.255.0</div><div class="line">          inet6 addr: fe80::20c:29ff:fe11:9dcf/64 Scope:Link</div><div class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</div><div class="line">          RX packets:879 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:652 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:1000</div><div class="line">          RX bytes:89405 (89.4 KB)  TX bytes:75163 (75.1 KB)</div><div class="line"></div><div class="line">lo        Link encap:Local Loopback</div><div class="line">          inet addr:127.0.0.1  Mask:255.0.0.0</div><div class="line">          inet6 addr: ::1/128 Scope:Host</div><div class="line">          UP LOOPBACK RUNNING  MTU:65536  Metric:1</div><div class="line">          RX packets:208 errors:0 dropped:0 overruns:0 frame:0</div><div class="line">          TX packets:208 errors:0 dropped:0 overruns:0 carrier:0</div><div class="line">          collisions:0 txqueuelen:0</div><div class="line">          RX bytes:19171 (19.1 KB)  TX bytes:19171 (19.1 KB)</div></pre></td></tr></table></figure>
<p>如果不能够查看后ip不生效，重启虚拟机重新查看。</p>
<h4 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h4><ul>
<li>本机的无密码登录</li>
</ul>
<p>在每台虚拟机上分别执行以下命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -P &quot;&quot;</div><div class="line">cat $HOME/.ssh/id_rsa.pub &gt;&gt; $HOME/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh localhost</div></pre></td></tr></table></figure></p>
<p>可以发现此时无需输入密码</p>
<ul>
<li>集群之间的无密码ssh 通信</li>
</ul>
<p>以192.168.24.110/111/112 三台机为例</p>
<p>登录192.168.24.110<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-copy-id -i $HOME/.ssh/id_rsa.pub username@192.168.24.111</div><div class="line">ssh-copy-id -i $HOME/.ssh/id_rsa.pub username@192.168.24.112</div></pre></td></tr></table></figure></p>
<p>这样之后110 就可以无密码登录111 和112 两台机器，<br>同理设置另外两台机</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Vmware搭建集群（基础环境）&quot;&gt;&lt;a href=&quot;#Vmware搭建集群（基础环境）&quot; class=&quot;headerlink&quot; title=&quot;Vmware搭建集群（基础环境）&quot;&gt;&lt;/a&gt;Vmware搭建集群（基础环境）&lt;/h2&gt;&lt;h3 id=&quot;1-单台机器配置&quot;
    
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="VMware" scheme="http://yoursite.com/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>I love you</title>
    <link href="http://yoursite.com/2016/05/19/I-love-you/"/>
    <id>http://yoursite.com/2016/05/19/I-love-you/</id>
    <published>2016-05-18T16:43:03.000Z</published>
    <updated>2016-11-15T13:18:19.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="芝麻的文章"><a href="#芝麻的文章" class="headerlink" title="芝麻的文章"></a>芝麻的文章</h2><p>想和你一起坐火车去远行，<br>看着窗外陌生的风景慢悠悠的过，<br>还会有阳光斜斜的洒在你发间，<br>映着侧脸。</p>
<p>想和你并肩散步在昏黄的路灯下，<br>看着影子被灯光拉扯的佝偻又挺拔，<br>好像几步已一生，<br>光阴蔓延。</p>
<p>想和你躺在草地上一起看星星，<br>即使苍穹无边，也不用艳羡，<br>因为你已经是我的，<br>天地人间。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;芝麻的文章&quot;&gt;&lt;a href=&quot;#芝麻的文章&quot; class=&quot;headerlink&quot; title=&quot;芝麻的文章&quot;&gt;&lt;/a&gt;芝麻的文章&lt;/h2&gt;&lt;p&gt;想和你一起坐火车去远行，&lt;br&gt;看着窗外陌生的风景慢悠悠的过，&lt;br&gt;还会有阳光斜斜的洒在你发间，&lt;br&gt;映着侧脸。
    
    </summary>
    
      <category term="love" scheme="http://yoursite.com/categories/love/"/>
    
    
  </entry>
  
</feed>
